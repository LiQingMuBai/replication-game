{"version":3,"sources":["filecoin-logo.svg","gold.png","silver.png","bronze.png","gold-ribbon.png","silver-ribbon.png","bronze-ribbon.png","proof-DrgPoRep.svg","proof-Zigzag.svg","proof-Unknown.svg","Instructions.js","Leaderboard.js","LeaderboardList.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Instructions","_ref","onShowLeaderboard","react_default","a","createElement","react","className","role","aria-label","href","onClick","size","filesize","partial","standard","output","Avatar","name","_ref$className","_ref$size","src","concat","style","width","height","alt","onError","e","target","md5","ReplTime","_ref2","time","toFixed","Entry","_ref3","medal","title","Leaderboard_Avatar","Leaderboard_Medal","type","Leaderboard_ReplTime","Medal","_ref4","srcs","gold","goldRibbon","silver","silverRibbon","bronze","bronzeRibbon","includes","marginTop","marginBottom","ProofIcon","_ref5","typ","proofUnknown","proofDrgPoRep","proofZigzag","ProofDesc","DrgPoRep","Zigzag","Header","_ref6","params","Leaderboard_ProofIcon","challenge_count","vde","degree","expansion_degree","layers","CollapsedLeaderboard","_ref7","entries","onExpand","top3","slice","rest","backgroundColor","Leaderboard_Header","listStyleType","map","_ref8","id","prover","secondsPerMBTime","key","Leaderboard_Entry","_ref9","length","_ref10","borderColor","ExpandedLeaderboard","_ref11","onCollapse","_ref12","_ref13","_ref14","_ref15","Leaderboard","_ref16","_useState","useState","_useState2","Object","slicedToArray","expanded","setExpanded","Leaderboard_ExpandedLeaderboard","Leaderboard_CollapsedLeaderboard","REFRESH_INTERVAL","process","REACT_APP_REFRESH_INTERVAL","TOP_BOARD_PARAM_IDS","LeaderboardList","state","_this2","this","refresh","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","fetch","sent","ok","Error","status","t0","json","t1","t2","boardData","setState","call","t3","console","error","_refreshTimeoutId","setTimeout","finish","stop","apply","arguments","clearTimeout","_this3","_this$state","all","data","groups","d","objectSpread","repl_time","reduce","values","filter","l","sort","b","aIndex","indexOf","bIndex","board","processBoardData","top","log","src_Leaderboard","Component","showInstructions","onShowInstructions","logo","App","setShowInstructions","App_Header","src_Instructions","src_LeaderboardList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1be8287b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/filecoin-logo.346c3e5d.svg\";","module.exports = __webpack_public_path__ + \"static/media/gold.c47082ef.png\";","module.exports = __webpack_public_path__ + \"static/media/silver.f6a621b7.png\";","module.exports = __webpack_public_path__ + \"static/media/bronze.486ada9a.png\";","module.exports = __webpack_public_path__ + \"static/media/gold-ribbon.86fe424e.png\";","module.exports = __webpack_public_path__ + \"static/media/silver-ribbon.e694d2b3.png\";","module.exports = __webpack_public_path__ + \"static/media/bronze-ribbon.191e8a6b.png\";","module.exports = __webpack_public_path__ + \"static/media/proof-DrgPoRep.9d6b5bb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/proof-Zigzag.6e939b4e.svg\";","module.exports = __webpack_public_path__ + \"static/media/proof-Unknown.d46fcfb9.svg\";","/* eslint-env browser */\n\nimport React, { Fragment } from 'react'\n\nconst Instructions = ({ onShowLeaderboard }) => {\n  return (\n    <Fragment>\n      <div className='mw7 center pb3 montserrat gray f6 fw2 lh-copy'>\n        <h2 className='f4 fw2 mv3 white ttu'><span role='img' aria-label='icon for introduction'>📖</span> Introduction</h2>\n        <h3 className='f5 fw2 mt4 mb3 white'>What is this game?</h3>\n        <p>The Replication Game is a competition where participants compete to outperform the default implementation of Proof-of-Replication. To participate in the game, you can run the current replication algorithm (or your own implementation) and post your proof on our server.</p>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>What is Proof-of-Replication?</h3>\n        <p>Proof of Replication is the proof that:</p>\n        <ol>\n          <li>the Filecoin Storage Market is secure: it ensures that miners cannot lie about storing users' data</li>\n          <li> the Filecoin Blockchain is secure: it ensures that miners cannot lie about the amount of storage they have (remember, miners win blocks based on their storage power!).</li>\n        </ol>\n        <p>In Filecoin, we use the Proof of Replication inside \"Sealing\" during mining.</p>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>How does Proof of Replication work?</h3>\n        <p>The intuition behind Proof of Replication is the following: the data from the Filecoin market is encoded via a slow sequential computation that cannot be parallelized.</p>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>How can I climb up in the leaderboard?</h3>\n        <p>There are some strategies to replicate \"faster\", some are practical (software and hardware optimizations), some are believe to be impractical or impossible (get ready to win a price and be remembered in the history of cryptography if you do so!)</p>\n\n        <ul>\n          <li><i>Practical attempts:</i> Implement a faster replication algorithm with better usage of memory, optimize some parts of the algorithm (e.g. Pedersen, Blake2s) in hardware (e.g. FPGA, GPU, ASICs), performing attacks on Depth Robust Graphs (the best known attacks are here).</li>\n          <li><i>Impractical attempts:</i> Find special datasets that allow for faster replication, break the sequentiality assumption, generate the proof storing less data, break Pedersen hashes.</li>\n        </ul>\n\n        <hr className='black-20 b--solid mv4' />\n\n        <h2 className='f4 fw2 mv3 white ttu'><span role='img' aria-label='icon for play the game'>🕹</span> Play the Game</h2>\n\n        <p>Make sure you have all required dependencies installed:</p>\n\n        <ul>\n          <li><a href='https://git-scm.com' className='gray hover-white'>Git</a></li>\n          <li><a href='https://www.rust-lang.org/tools/install' className='gray hover-white'>rustup</a></li>\n          <li>Rust nightly (usually <code>rustup install nightly</code>)</li>\n          <li><a href='https://www.postgresql.org' className='gray hover-white'>PostgreSQL</a></li>\n          <li>Clang and libclang</li>\n          <li><a href='https://stedolan.github.io/jq/download/' className='gray hover-white'>jq</a> (optional) - prettify json output on the command-line, for viewing the leaderboard</li>\n        </ul>\n\n        <p>Clone the project with git:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>git clone https://github.com/filecoin-project/replication-game.git</pre>\n\n        <p>From the replication-game/ directory, compile the game binary:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>cargo +nightly build --release --bin replication-game</pre>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>Play the game from the command line</h3>\n\n        <p>There are two ways to play:</p>\n        <ul>\n          <li><b>Method 1:</b> Run the `play` helper script</li>\n          <li><b>Method 2:</b> Run each individual command</li>\n        </ul>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>Method 1: Run the `play` helper script</h3>\n\n        <p>From the replication-game/ directory, run the `play` helper script in `bin/`, specifying:</p>\n\n        <ul>\n          <li><code>NAME</code>: your player name</li>\n          <li><code>SIZE</code>: the size in KB of the data you want to replicate</li>\n          <li><code>TYPE</code>: the type of algorithm you want to run (current options are `zigzag` and `drgporep`)</li>\n        </ul>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>bin/play NAME SIZE TYPE</pre>\n\n        <p>The <code>play</code> script will retrieve the seed from the game server, replicate the data, generate a proof, and then post that proof to the game server. The script runs each of the commands in **Method 2**, but wraps them in an easy-to-use shell script.</p>\n\n        <h3 className='f5 fw2 mt4 mb3 white'>Method 2: Run each individual command</h3>\n\n        <p>Set your player name:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>export REPL_GAME_ID=\"ReadyPlayerOne\"</pre>\n\n        <p>Get the seed from our server:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>{`curl https://replication-game.herokuapp.com/api/seed > seed.json\nexport REPL_GAME_SEED=$(cat seed.json| jq -r '.seed')\nexport REPL_GAME_TIMESTAMP=$(cat seed.json| jq -r '.timestamp')`}</pre>\n\n        <p>Play the game:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>{`./target/release/replication-game \\\\\n    --prover $REPL_GAME_ID \\\\\n    --seed $REPL_GAME_SEED \\\\\n    --timestamp $REPL_GAME_TIMESTAMP \\\\\n    --size 1048576 \\\\\n    zigzag > proof.json`}</pre>\n\n        <p>Send your proof:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>curl -X POST -H \"Content-Type: application/json\" -d @./proof.json https://replication-game.herokuapp.com/api/proof</pre>\n\n        <p>Finally:</p>\n\n        <p><button onClick={onShowLeaderboard} className='montserrat f6 fw2 gray bw0 br4 ph3 pv2 bg-white-10 hover-bg-white-30 pointer'>Check your place on the leaderboards!</button></p>\n\n        <hr className='black-20 b--solid mv4' />\n\n        <h2 className='f4 fw2 mt4 mb3 white ttu'>FAQ</h2>\n\n        <blockquote className='ml0 mt4 white'>What parameters should I be using for the replication?</blockquote>\n\n        <p>Our leaderboard will track the parameters you will be using, feel free to experiment with many. We are targeting powers of two, in particular: <code>1GiB</code> (<code>--size 1048576</code>), <code>16GiB</code> (<code>--size 16777216</code>), <code>1TB</code> (<code>--size 1073741824</code>)</p>\n\n        <blockquote className='ml0 mt4 white'>How do I know what the parameters mean?</blockquote>\n\n        <p>Run this command to find out:</p>\n\n        <pre className='pa3 bg-black-30 br2 overflow-x-scroll'>./target/debug/replication-game --help</pre>\n\n        <blockquote className='ml0 mt4 white'>What do I win if I am first?</blockquote>\n\n        <p>So far, we have no bounty set up for this, but we are planning on doing so. If you beat the replication game (and you can prove it by being in the leaderboard), reach out to <a href='mailto:filecoin-research@protocol.ai' className='gray hover-white'>filecoin-research@protocol.ai</a>.</p>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Instructions\n","import React, { useState } from 'react'\nimport md5 from 'md5'\nimport filesize from 'filesize'\nimport gold from './gold.png'\nimport silver from './silver.png'\nimport bronze from './bronze.png'\nimport goldRibbon from './gold-ribbon.png'\nimport silverRibbon from './silver-ribbon.png'\nimport bronzeRibbon from './bronze-ribbon.png'\nimport proofDrgPoRep from './proof-DrgPoRep.svg'\nimport proofZigzag from './proof-Zigzag.svg'\nimport proofUnknown from './proof-Unknown.svg'\n\nconst size = filesize.partial({ standard: 'iec', output: 'array' })\n\nconst Avatar = ({ name, className = 'mr3 v-mid', size = 60 }) => (\n  <img\n    src={`https://github.com/${name}.png?size=${size}`}\n    className={className}\n    style={{ width: size / 2, height: size / 2 }}\n    alt={`${name} avatar`}\n    onError={e => { e.target.src = `https://www.gravatar.com/avatar/${md5(name)}?d=retro&s=${size}` }} />\n)\n\nconst ReplTime = ({ time }) => (\n  <span className='dib f5 fr bg-snow black pa2 br3 lh-solid tr courier ml3'>\n    {time.toFixed(3)}\n  </span>\n)\n\nconst Entry = ({ name, time, medal }) => (\n  <div className='dib w-100 v-mid'>\n    <div className='flex items-center' title={`${name} took ${time.toFixed(3)}s to replicate 1MiB of data`}>\n      <Avatar name={name} />\n      <span className='f4 fw5 montserrat white truncate flex-auto'>{name}</span>\n      {medal ? <Medal type={medal} /> : null}\n      <ReplTime time={time} />\n    </div>\n  </div>\n)\n\nconst Medal = ({ type }) => {\n  const srcs = { gold, goldRibbon, silver, silverRibbon, bronze, bronzeRibbon }\n  const style = ['gold', 'silver', 'bronze'].includes(type)\n    ? { width: 45, height: 45, marginTop: -5, marginBottom: -5 }\n    : { width: 45, height: 84, marginTop: -19, marginBottom: -22 }\n  return <img src={srcs[type]} alt={type} className='dn db-m db-l' style={style} />\n}\n\nconst ProofIcon = ({ typ, className }) => {\n  let src = proofUnknown\n  if (typ === 'DrgPoRep') {\n    src = proofDrgPoRep\n  } else if (typ === 'Zigzag') {\n    src = proofZigzag\n  }\n  return <img src={src} alt='icon by Eliricon from the Noun Project' width='45' height='45' className={className} />\n}\n\nconst ProofDesc = {\n  DrgPoRep: 'Depth Robust Graph Proof-of-Replication',\n  Zigzag: 'Specialized Layered Depth Robust Graph Proof-of-Replication'\n}\n\nconst Header = ({ params }) => (\n  <div className='pl4 pr3'>\n    <h2 className='flex-m flex-l items-center montserrat fw2 mv3'>\n      <div className='flex-none mb3 mb0-m mb0-l' title={ProofDesc[params.typ] || ''}>\n        <ProofIcon className='mr2 v-mid' typ={params.typ} />\n        <span className='v-mid mr3'>{params.typ}</span>\n      </div>\n      <div className='flex-auto tr-m tr-l'>\n        <span className='dib pv2 ph3 bg-white-10 br2'>\n          {size(params.size)[0]} <small className='gray'>{size(params.size)[1]}</small>\n        </span>\n      </div>\n    </h2>\n    <ul className='montserrat f6 fw2 list mv3 pl0'>\n      <li className='dib-ns mr3'><span className='gray mr2'>Challenges</span> {params.challenge_count}</li>\n      <li className='dib-ns mr3'><span className='gray mr2'>VDE</span> {params.vde}</li>\n      <li className='dib-ns mr3'><span className='gray mr2'>Degree</span> {params.degree}</li>\n      <li className='dib-ns mr3'><span className='gray mr2'>Expansion degree</span> {params.expansion_degree}</li>\n      <li className='dib-ns mr3'><span className='gray mr2'>Layers</span> {params.layers}</li>\n    </ul>\n  </div>\n)\n\nconst CollapsedLeaderboard = ({ entries, onExpand }) => {\n  const top3 = entries.slice(0, 3)\n  const rest = entries.slice(3)\n  return (\n    <div className='mb4 pv1 ph1 br3 shadow-3' style={{ backgroundColor: '#1E2135' }}>\n      <Header params={top3[0].params} />\n      <div className='pr4 fr' style={{ marginTop: '-2.25rem' }}>\n        <div className='f7 f6-m f6-l mt1 montserrat fw2 gray'>Repl time (s/MiB)</div>\n      </div>\n      <ol className='ma0 lh-copy mw7 mb3 pl3 center db gray' style={{ listStyleType: 'decimal' }}>\n        {top3.slice(0, 1).map(({ id, prover, secondsPerMBTime, params }) => (\n          <li\n            key={id}\n            className='tl f4 mh3 pa3 b--gold b--solid bw1 br3 br--top shadow-1'\n            style={{ backgroundColor: 'rgba(255, 183, 0, 0.75)' }}>\n            <Entry name={prover} time={secondsPerMBTime} medal='gold' />\n          </li>\n        ))}\n        {top3.slice(1, 2).map(({ id, prover, secondsPerMBTime, params }) => (\n          <li\n            key={id}\n            className={`tl f4 mh3 pa3 b--silver b--solid bw1 relative shadow-1 ${top3.length === 2 ? 'br3 br--bottom' : ''}`}\n            style={{ backgroundColor: 'rgba(153, 153, 153, 0.75)' }}>\n            <Entry name={prover} time={secondsPerMBTime} medal='silver' />\n          </li>\n        ))}\n        {top3.slice(2, 3).map(({ id, prover, secondsPerMBTime, params }) => (\n          <li\n            key={id}\n            className='tl f4 mh3 pa3 b--solid bw1 br3 br--bottom shadow-1'\n            style={{ borderColor: '#cd7f32', backgroundColor: 'rgba(205, 127, 50, 0.75)' }}>\n            <Entry name={prover} time={secondsPerMBTime} medal='bronze' />\n          </li>\n        ))}\n      </ol>\n      {rest.length ? (\n        <div className='tc mb3'>\n          <button type='button' className='montserrat f6 fw2 gray bw0 br3 ph3 pv2 bg-black-10 hover-bg-black-30 pointer' onClick={onExpand}>Show {rest.length} more</button>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nconst ExpandedLeaderboard = ({ entries, onCollapse }) => (\n  <div className='mb4 pv1 ph1 br3' style={{ backgroundColor: '#1E2135' }}>\n    <Header params={entries[0].params} />\n    <div className='pr4 fr' style={{ marginTop: '-2.25rem' }}>\n      <div className='f7 f6-m f6-l mt1 montserrat fw2 gray'>Repl time (s/MiB)</div>\n    </div>\n    <ol className='ma0 lh-copy mw7 mb3 pl3 center db gray' style={{ listStyleType: 'decimal' }}>\n      {entries.slice(0, 1).map(({ id, prover, secondsPerMBTime, params }) => (\n        <li\n          key={id}\n          className='tl f4 mh3 pa3 b--gold b--solid bw1 br3 shadow-1'\n          style={{ backgroundColor: 'rgba(255, 183, 0, 0.75)' }}>\n          <Entry name={prover} time={secondsPerMBTime} medal='goldRibbon' />\n        </li>\n      ))}\n      {entries.slice(1, 2).map(({ id, prover, secondsPerMBTime, params }) => (\n        <li\n          key={id}\n          className='tl f4 mt4 mh3 pa3 b--silver b--solid bw1 br3 shadow-1'\n          style={{ backgroundColor: 'rgba(153, 153, 153, 0.75)' }}>\n          <Entry name={prover} time={secondsPerMBTime} medal='silverRibbon' />\n        </li>\n      ))}\n      {entries.slice(2, 3).map(({ id, prover, secondsPerMBTime, params }) => (\n        <li\n          key={id}\n          className='tl f4 mt4 mh3 mb4 pa3 b--solid bw1 br3 shadow-1'\n          style={{ borderColor: '#cd7f32', backgroundColor: 'rgba(205, 127, 50, 0.75)' }}>\n          <Entry name={prover} time={secondsPerMBTime} medal='bronzeRibbon' />\n        </li>\n      ))}\n      {entries.slice(3).map(({ id, prover, secondsPerMBTime, params }) => (\n        <li key={id} className='tl mt3 mh3 ph3 f4'>\n          <Entry name={prover} time={secondsPerMBTime} />\n        </li>\n      ))}\n    </ol>\n    <div className='tc mb3'>\n      <button type='button' className='montserrat f6 fw2 gray bw0 br3 ph3 pv2 bg-black-10 hover-bg-black-30 pointer' onClick={onCollapse}>Minimise</button>\n    </div>\n  </div>\n)\n\nconst Leaderboard = ({ entries }) => {\n  const [ expanded, setExpanded ] = useState(false)\n  return expanded\n    ? <ExpandedLeaderboard entries={entries} onCollapse={() => setExpanded(false)} />\n    : <CollapsedLeaderboard entries={entries} onExpand={() => setExpanded(true)} />\n}\n\nexport default Leaderboard\n","/* eslint-env browser */\n\nimport React, { Component, Fragment } from 'react'\nimport Leaderboard from './Leaderboard'\n\nconst API_URL = process.env.REACT_APP_API_URL || 'leaderboard.json'\nconst REFRESH_INTERVAL = process.env.REACT_APP_REFRESH_INTERVAL || 10 * 1000\n\n// These are the param sets for leaderboards that should be shown at the top\nconst TOP_BOARD_PARAM_IDS = [\n  -6035303110978460000, // Zigzag 10MB\n  -3754677902270980600, // DrgPoRep 10MB\n  8939453956850745000, // Zigzag 1GB\n  8586938920904822000 // DrgPoRep 1GB\n]\n\nfunction processBoardData (data) {\n  data = data.map(d => ({ ...d, secondsPerMBTime: d.repl_time / (d.params.size / (1024 * 1024)) }))\n\n  // Group leaderboard by params ID - { id: [entries] }\n  const groups = data.reduce((groups, d) => {\n    groups[d.params.id] = (groups[d.params.id] || []).concat(d)\n    return groups\n  }, {})\n\n  // [[leaderboard], [leaderboard]]\n  return Object.values(groups)\n    .filter(l => l.length > 1) // Not really a leaderboard if only 1 person...\n    .sort((a, b) => { // Sort by \"top\" boards then popular boards\n      const aIndex = TOP_BOARD_PARAM_IDS.indexOf(a[0].params.id)\n      const bIndex = TOP_BOARD_PARAM_IDS.indexOf(b[0].params.id)\n      if (aIndex > -1 && bIndex > -1) return aIndex - bIndex\n      if (aIndex > -1) return -1\n      if (bIndex > -1) return 1\n      return b.length - a.length\n    })\n    .map(board => board.sort((a, b) => a.secondsPerMBTime - b.secondsPerMBTime))\n}\n\nclass LeaderboardList extends Component {\n  state = { expanded: false }\n\n  componentDidMount () {\n    const refresh = async () => {\n      try {\n        const res = await fetch(API_URL)\n        if (!res.ok) throw new Error(`unexpected status ${res.status}`)\n        this.setState({ boardData: await res.json() })\n      } catch (err) {\n        console.error('failed to fetch leaderboard data', err)\n      } finally {\n        this._refreshTimeoutId = setTimeout(refresh, REFRESH_INTERVAL)\n      }\n    }\n    refresh()\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._refreshTimeoutId)\n  }\n\n  render () {\n    const { boardData, expanded } = this.state\n\n    if (!boardData) {\n      return (\n        <div className='mw7 center pb2'>\n          <p>Loading...</p>\n        </div>\n      )\n    }\n\n    const all = processBoardData(boardData)\n    const top = all.slice(0, TOP_BOARD_PARAM_IDS.length)\n    const rest = all.slice(TOP_BOARD_PARAM_IDS.length)\n\n    const onExpand = () => this.setState({ expanded: true })\n    const onCollapse = () => this.setState({ expanded: false })\n\n    console.log(all)\n\n    return (\n      <Fragment>\n        <div className='mw7 center pb2 cf'>\n          <h2 className='f4 f3-m f3-l mv3 pl4-m pl4-l tc tl-m tl-l montserrat fw2 ttu fl-m fl-l'>Leaderboards</h2>\n        </div>\n        <div className='mw7 center pb2'>\n          {top.map(l => <Leaderboard key={l[0].params.id} entries={l} />)}\n        </div>\n        {rest.length ? (\n          <div className='flex items-center mt4 mb5 ph3'>\n            <div className='flex-auto'><hr className={`black-${expanded ? '20' : '10'} b--solid`} /></div>\n            <div className='flex-none mh3'>\n              <button\n                type='button'\n                className='montserrat f6 fw2 gray bw0 br3 ph3 pv2 bg-black-10 hover-bg-black-30 pointer'\n                onClick={expanded ? onCollapse : onExpand}>\n                {expanded ? 'Hide other leaderboards' : 'Show all leaderboards' }\n              </button>\n            </div>\n            <div className='flex-auto'><hr className={`black-${expanded ? '20' : '10'} b--solid`} /></div>\n          </div>\n        ) : null}\n        {rest.length && expanded ? (\n          <div className='mw7 center pb2 cf'>\n            {rest.map(l => <Leaderboard key={l[0].params.id} entries={l} />)}\n          </div>\n        ) : null}\n      </Fragment>\n    )\n  }\n}\n\nexport default LeaderboardList\n","/* eslint-env browser */\n\nimport React, { useState } from 'react'\nimport logo from './filecoin-logo.svg'\nimport Instructions from './Instructions'\nimport LeaderboardList from './LeaderboardList'\n\nconst Header = ({ showInstructions, onShowInstructions, onShowLeaderboard }) => (\n  <header className='bg-black-30 pb4 ph3'>\n    <div className='mw7 center relative'>\n      <button\n        className='fr montserrat f6 fw2 gray bw0 br4 ph3 pv2 bg-white-10 hover-bg-white-30 pointer absolute right-0 top-1'\n        onClick={showInstructions ? onShowLeaderboard : onShowInstructions}>\n        {showInstructions ? '⬅ Back to leaderboards' : 'How to play?'}\n      </button>\n      <h1 className='ma0 pt5 pb4 fw2 f1 montserrat tc'>\n        <img src={logo} alt='fil' width='80' className='db dib-l center mb3 mb0-l ml0-l mr4-l v-mid' />\n        <span className='v-mid'>Replication Game</span>\n      </h1>\n      {showInstructions ? null : (\n        <p className='montserrat f6 fw2 gray pl4-ns lh-copy'>\n          The Replication Game is a competition where participants compete to out perform the default implementation of Proof-of-Replication. To participate in the game, you can run the current replication algorithm (or your own implementation) and post your proof on our server.\n        </p>\n      )}\n    </div>\n  </header>\n)\n\nconst App = () => {\n  const [ showInstructions, setShowInstructions ] = useState(false)\n  const onShowInstructions = () => setShowInstructions(true)\n  const onShowLeaderboard = () => setShowInstructions(false)\n\n  return (\n    <div className='sans-serif white'>\n      <Header showInstructions={showInstructions} onShowInstructions={onShowInstructions} onShowLeaderboard={onShowLeaderboard} />\n      <main className='pt4 ph3'>\n        {showInstructions ? <Instructions onShowLeaderboard={onShowLeaderboard} /> : <LeaderboardList />}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}